---
import fetch from "node-fetch";
import { JSDOM } from "jsdom";
// Import the getAllArticles function from the newsArchive.js file
import getAllArticles from "../lib/newsArchive.js";
// Initialize articles variable and error flag
let articles;
let errorOccurred = false;

try {

  // Try to fetch all articles
  articles = await getAllArticles();
} catch (error) {
  // If an error occurs, log it and set the error flag
  console.error("Failed to get articles:", error);
  articles = [];
  errorOccurred = true;
}

// This function fetches Open Graph (OG) data from a given URL.
// Open Graph is a protocol that allows a webpage to become a "rich" object in a social graph.
// It is used by social platforms like Facebook, LinkedIn, and Twitter to preview the content of a webpage.
async function fetchOGData(url) {
  try {
    // Fetch the webpage content
    const response = await fetch(url);
    // Parse the response to text
    const html = await response.text();
    // Use JSDOM to create a DOM from the HTML string
    const dom = new JSDOM(html);
    // Get the document object from the DOM
    const doc = dom.window.document;
    // Try to get the Open Graph title from the meta tags, if it doesn't exist, use the URL as the title
    let ogTitle =
      doc.querySelector('meta[property="og:title"]')?.content || url;
    // Try to get the Open Graph image from the meta tags
    const ogImage = doc.querySelector('meta[property="og:image"]')?.content;
    // Return the Open Graph data
    return { ogTitle, ogImage, url };
  } catch (error) {
    // If an error occurs, log it and return default values
    console.error("Error fetching OG data:", error);
    return { ogTitle: "No title", ogImage: "No image", url };
  }
}

async function articlesWithOGData(articles) {
  return await Promise.all(articles.map(fetchOGData));
}
let allArticles = await articlesWithOGData(articles);

let preferences = "";
---
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>Cepotr World</title>
		<!-- Ethers.js CDN for Blockchain functionality -->
		<script src="https://cdn.jsdelivr.net/npm/ethers/dist/ethers.min.js"></script>
	</head>
	<body>
		<nav>
			<form id="preferenceForm">
				<label for="preferences">Enter your preferences:</label>
				<input id="preferences" name="preferences" type="text">
				<button type="submit">Submit</button>
			</form>
			<p>Ceptor Games</p>
			<button id="fetchButton">Fetch More, Chainlink</button>
		</nav>
		<h1>News Articles</h1>
	
		<script>
			document.addEventListener('DOMContentLoaded', function() {
				// Handling form submission
				document.getElementById('preferenceForm').addEventListener('submit', function(event) {
					event.preventDefault();
					const preferences = document.getElementById('preferences').value;
					console.log('Preferences: ', preferences);
					// Add logic here if needed
				});
	
				// Handling button click
				document.getElementById('fetchButton').addEventListener('click', async function() {
					console.log('Fetching more articles...');
					// Assuming window.ethereum is available
					const provider = new ethers.providers.Web3Provider(window.ethereum);
					const signer = provider.getSigner();
					console.log('Signer:', await signer.getAddress());
					// Additional logic to fetch articles
				});
			});
		</script>
	</body>
	</html>
	
<style>
	body {
	  font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;
	  margin: 0;
	  padding: 24px;
	}
	
	h1 {
	  text-align: center;
	  font-size: 64px;
	}
	
	ul {
	  list-style-type: none;
	  padding: 0;
	  display: grid;
	  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
	  grid-gap: 20px;
	}
	
	article {
	  background-color: #f4f4f4;
	  border-radius: 8px;
	  padding: 20px;
	  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
	  transition: transform 0.3s ease;
	}
	
	article:hover {
	  transform: translateY(-5px);
	}
	
	article a {
	  text-decoration: none;
	  color: #333;
	}
	
	article h2 {
	  font-size: 16px;
	  margin-top: 0;
	}
	
	article img {
	  width: 100%;
	  height: auto;
	  border-radius: 4px;
	  margin-top: 10px;
	}

	nav {
	  background-color: #1a1a1a;
	  color: white;
	  padding: 16px;
	  margin-top: 8px;
	  display: flex;
	  flex-direction: row;
	  justify-content: center;

	}

	form {
	position: absolute;
	left: 32px;
	}

	button {
			  background-color: #4CAF50;
	  color: white;
	  padding: 16px 20px;
	  margin-left: 10px;
	  border: none;
	  cursor: pointer;
	}

	button:hover {
	  background-color: #45a049;
	}
  </style>